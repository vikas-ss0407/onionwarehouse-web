import { useState } from "react";
import { fetchAndSaveLatest, getSensorData } from "../api/thingspeak";

export default function ManageSensors() {
Â  const [selectedSensor, setSelectedSensor] = useState(null);
Â  const [sensorData, setSensorData] = useState([]);
Â  const [isLoading, setIsLoading] = useState(false);
Â  const LDR_THRESHOLD = 2000;

Â  const handleSensorClick = async () => {
Â  Â  const sensorId = "sensor1";
Â  Â  setSelectedSensor(sensorId);
Â  Â  setIsLoading(true);

Â  Â  try {
Â  Â  Â  // ðŸš€ OPTIMIZATION: Use Promise.all to fetch and save data concurrently.
Â  Â  Â  // The historical data fetch (getSensorData) will start immediately, 
Â  Â  Â  // without waiting for the latest reading to be saved (fetchAndSaveLatest).
Â  Â  Â  const [_, historyData] = await Promise.all([
Â  Â  Â  Â  fetchAndSaveLatest(sensorId),
Â  Â  Â  Â  getSensorData(sensorId),
Â  Â  Â  ]);

Â  Â  Â  // 2. Data transformation: Convert string fields to numbers
Â  Â  Â  const formattedData = historyData.map(item => ({
Â  Â  Â  Â  ...item,
Â  Â  Â  Â  temperature: Number(item.temperature), 
Â  Â  Â  Â  humidity: Number(item.humidity), Â  Â  Â  
Â  Â  Â  Â  ldrValue: Number(item.ldrValue), Â  Â  Â  Â  
Â  Â  Â  })).reverse(); // Reverse to show latest readings at the top

Â  Â  Â  setSensorData(formattedData);

Â  Â  } catch (err) {
Â  Â  Â  console.error("Error fetching sensor data:", err);
Â  Â  Â  // Set error message for display
Â  Â  Â  setSensorData([{ error: "Failed to load data. Check console for details." }]); 
Â  Â  } finally {
Â  Â  Â  setIsLoading(false); // Stop loading
Â  Â  }
Â  };

Â  // Utility component to display a styled badge for Light/Dark status
Â  const LightStatusBadge = ({ ldrValue }) => {
Â  Â  if (typeof ldrValue !== 'number' || isNaN(ldrValue)) return <span className="text-gray-500">---</span>;

Â  Â  const isLight = ldrValue < LDR_THRESHOLD;
Â  Â  const text = isLight ? "LIGHT" : "DARK";
Â  Â  const color = isLight ? "bg-yellow-100 text-yellow-700" : "bg-gray-200 text-gray-700";

Â  Â  return (
Â  Â  Â  <span className={`px-3 py-1 text-xs font-semibold rounded-full ${color} whitespace-nowrap`}>
Â  Â  Â  Â  {text}
Â  Â  Â  </span>
Â  Â  );
Â  };

Â  // Determine content for the table body based on state
Â  const tableBodyContent = () => {
Â  Â  if (isLoading) {
Â  Â  Â  return (
Â  Â  Â  Â  <tr className="bg-gray-50">
Â  Â  Â  Â  Â  <td colSpan={5} className="text-center py-4 text-indigo-600">
Â  Â  Â  Â  Â  Â  <div className="flex justify-center items-center">
Â  Â  Â  Â  Â  Â  Â  <svg className="animate-spin h-5 w-5 mr-3 text-indigo-600" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
Â  Â  Â  Â  Â  Â  Â  Â  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Fetching data from database...
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  </tr>
Â  Â  Â  );
Â  Â  }

Â  Â  if (sensorData.length > 0 && sensorData[0].error) {
Â  Â  Â  return (
Â  Â  Â  Â  <tr className="bg-red-50">
Â  Â  Â  Â  Â  <td colSpan={5} className="text-center py-4 text-red-700 font-medium">
Â  Â  Â  Â  Â  Â  Error: {sensorData[0].error}
Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  </tr>
Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  if (sensorData.length === 0 && selectedSensor) {
Â  Â  Â  return (
Â  Â  Â  Â  <tr className="bg-gray-50">
Â  Â  Â  Â  Â  <td colSpan={5} className="text-center py-4 text-gray-500">
Â  Â  Â  Â  Â  Â  No readings found for {selectedSensor}.
Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  </tr>
Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  // Actual data rows
Â  Â  return sensorData.map((item, index) => (
Â  Â  Â  <tr key={index} className={index % 2 === 0 ? "bg-white hover:bg-indigo-50" : "bg-gray-50 hover:bg-indigo-50"}>
Â  Â  Â  Â  <td className="border-r border-gray-200 px-4 py-2 text-sm text-gray-600">
Â  Â  Â  Â  Â  {new Date(item.createdAt).toLocaleString()}
Â  Â  Â  Â  </td>
Â  Â  Â  Â  <td className="border-r border-gray-200 px-4 py-2 text-center font-medium text-gray-800">
Â  Â  Â  Â  Â  {/* Safety check for rendering */}
Â  Â  Â  Â  Â  {typeof item.temperature === 'number' && !isNaN(item.temperature) ? item.temperature.toFixed(1) : '---'}
Â  Â  Â  Â  </td>
Â  Â  Â  Â  <td className="border-r border-gray-200 px-4 py-2 text-center font-medium text-gray-800">
Â  Â  Â  Â  Â  {/* Safety check for rendering */}
Â  Â  Â  Â  Â  {typeof item.humidity === 'number' && !isNaN(item.humidity) ? item.humidity.toFixed(0) : '---'}
Â  Â  Â  Â  </td>
Â  Â  Â  Â  <td className="border-r border-gray-200 px-4 py-2 text-center text-sm text-gray-600">
Â  Â  Â  Â  Â  {item.ldrValue}
Â  Â  Â  Â  </td>
Â  Â  Â  Â  <td className="px-4 py-2 text-center">
Â  Â  Â  Â  Â  <LightStatusBadge ldrValue={item.ldrValue} />
Â  Â  Â  Â  </td>
Â  Â  Â  </tr>
Â  Â  ));
Â  };


Â  return (
Â  Â  <div className="min-h-screen bg-gray-50 p-6 md:p-10">
Â  Â  Â  
Â  Â  Â  {/* UPDATED HEADER with sticky positioning */}
Â  Â  Â  <div className="text-center mb-8 sticky top-0 z-50 bg-gray-50/90 backdrop-blur-sm py-4 border-b-4 border-indigo-100/70">
Â  Â  Â  Â  <h1 className="text-4xl font-extrabold text-gray-800">Sensor Management Console</h1>
Â  Â  Â  Â  <p className="text-lg text-gray-500 mt-2">View real-time and historical data for connected sensors.</p>
Â  Â  Â  </div>

Â  Â  Â  {/* SENSOR BUTTONS */}
Â  Â  Â  <div className="flex justify-center gap-6 mb-12">
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={handleSensorClick}
Â  Â  Â  Â  Â  className={`
Â  Â  Â  Â  Â  Â  px-8 py-3 rounded-xl text-lg font-semibold shadow-lg transition duration-300 transform 
Â  Â  Â  Â  Â  Â  ${selectedSensor === 'sensor1' 
Â  Â  Â  Â  Â  Â  Â  ? 'bg-indigo-600 text-white shadow-indigo-400/70 scale-105 ring-4 ring-indigo-300'
Â  Â  Â  Â  Â  Â  Â  : 'bg-indigo-400 text-white hover:bg-indigo-500 shadow-md'
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  `}
Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {isLoading && selectedSensor === 'sensor1' ? (
Â  Â  Â  Â  Â  Â  Â  <span className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Loading...
Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  selectedSensor === 'sensor1' ? 'Sensor 1 (Active)' : 'Load Sensor 1 Data'
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </button>
Â  Â  Â  Â  {/* Placeholder for more sensors */}
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  disabled
Â  Â  Â  Â  Â  className="px-8 py-3 rounded-xl text-lg font-semibold shadow-md bg-gray-300 text-gray-600 cursor-not-allowed"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Sensor 2 (Coming Soon)
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {/* SENSOR DATA TABLE */}
Â  Â  Â  {selectedSensor && (
Â  Â  Â  Â  <div className="bg-white p-6 rounded-xl shadow-2xl border border-gray-100">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-700 mb-6 border-b pb-2">
Â  Â  Â  Â  Â  Â  Historical Readings for {selectedSensor}
Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  <div className="overflow-x-auto">
Â  Â  Â  Â  Â  Â  <table className="w-full border-collapse">
Â  Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  Â  <tr className="bg-indigo-50 text-indigo-800 uppercase text-sm leading-normal shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-4 py-3 text-left font-bold border-r border-indigo-200 rounded-tl-xl">Timestamp</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-4 py-3 text-center font-bold border-r border-indigo-200">Temp. (Â°C)</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-4 py-3 text-center font-bold border-r border-indigo-200">Humidity (%)</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-4 py-3 text-center font-bold border-r border-indigo-200">LDR Value (Raw)</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="px-4 py-3 text-center font-bold rounded-tr-xl">Light Status</th>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  <tbody className="text-gray-700 text-sm font-light">
Â  Â  Â  Â  Â  Â  Â  Â  {tableBodyContent()}
Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}